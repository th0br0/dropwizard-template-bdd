import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'shadow'

sourceCompatibility = 1.7
targetCompatibility = 1.7


repositories {
    mavenCentral()
    jcenter()
}

project.ext {
    release = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
    jarBase = "$name-$release"
    shadowJarName = "$jarBase-$version-shadow.jar"
    mainClass = 'com.example.helloworld.HelloWorldApplication'
    destinationPath = "${project.buildDir}/distributions"
}

dependencies {
    compile(
            "io.dropwizard:dropwizard-core:$dropwizardVersion",
            "io.dropwizard:dropwizard-hibernate:$dropwizardVersion",
            "io.dropwizard:dropwizard-assets:$dropwizardVersion",
            "io.dropwizard:dropwizard-auth:$dropwizardVersion",
            "io.dropwizard:dropwizard-views:$dropwizardVersion",
            "io.dropwizard:dropwizard-migrations:$dropwizardVersion"
    )

    compile "com.h2database:h2:1.3.175"

    // IntelliJ doesn't like the src/cucumber path...
    testCompile "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testCompile "info.cukes:cucumber-java:$cucumberVersion"
    testCompile "info.cukes:cucumber-junit:$cucumberVersion"
    testCompile "junit:junit:4.10"
    testCompile 'com.jayway.restassured:rest-assured:2.3.0'

}


jar {
    manifest {
        attributes 'Main-Class': mainClass
        attributes 'Implementation-Title': "$name", 'Implementation-Version': version
    }
}

shadow {
    baseName jarBase
    destinationDir destinationPath

    transformer(ServiceFileTransformer)

    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

task migrateDb(dependsOn: 'classes', type: JavaExec) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    args 'db', 'migrate', 'app.yml'
}

task run(dependsOn: 'classes', type: JavaExec) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    args 'server', 'app.yml'
}

task runShadow(type: Exec, dependsOn: 'shadowJar') {
    workingDir = "build/distributions"
    commandLine = ['java', '-jar', '-server', shadowJarName, 'server', '../../app.yml']
}
